/* eslint-env node, mocha */
'use strict';

const express = require('express');
const request = require('supertest');

const middleware = require('../');

describe('The middleware function generated by the module', function() {
  var app;
  var lastModified = '';
  before(function() {
    app = express();

    app.use(function(req, res, next) {
      res.set('X-Route-Hit', 'false');
      next();
    });

    app.use(middleware());

    app.get('/article/:id', function(req, res) {
      res.set('X-Route-Hit', 'true');
      res.send(req.params.id);
    });
  });

  it('should send a last-modified when making a request', function(done) {
    request(app)
      .get('/article/1')
      .expect('cache-control', /public/)
      .expect('X-Route-Hit', 'true')
      .expect('1')
      .expect(200)
      .expect(function(res) {
        lastModified = res.get('last-modified');
        if (!lastModified) {
          throw new Error('No last-modified header');
        }
      })
      .end(done)
    ;
  });

  it('should not hit routes when sending if-modified-since', function(done) {
    request(app)
      .get('/article/1')
      .set('if-modified-since', lastModified)
      .expect('cache-control', /public/)
      .expect('X-Route-Hit', 'false')
      .expect('')
      .expect(304)
      .end(done)
    ;
  });
});
